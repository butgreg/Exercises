
networks:
  lan_network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 192.168.10.0/24
          gateway: 192.168.10.254
          
  vlan1:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 192.168.20.0/24
          gateway: 192.168.20.254
          
  vlan2:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 192.168.30.0/24
          gateway: 192.168.30.254
  wan_network:
    driver: bridge
    internal: false
    ipam:
      config:
        - subnet: 192.168.136.0/24

services:
  router:
    build:
      context: ./config/router
      dockerfile: Dockerfile
    container_name: router
    privileged: true
    cap_add:
      - NET_ADMIN
    networks:
      lan_network:
        ipv4_address: 192.168.10.1
      vlan1:
        ipv4_address: 192.168.20.1
      vlan2:
        ipv4_address: 192.168.30.1
      wan_network: 
        ipv4_address: 192.168.136.2
    restart: always  # Ensures the container restarts if it stops

  dns_server:
    image: andyshinn/dnsmasq
    container_name: dns_server
    cap_add:
      - NET_ADMIN
    networks:
      lan_network:
        ipv4_address: 192.168.10.53
    volumes:
    - ./config/dnsmasq.conf:/etc/dnsmasq.conf
    entrypoint: ["dnsmasq", "--conf-file=/etc/dnsmasq.conf", "--no-daemon"]
    restart: always  # Ensures the container restarts if it stops

  linux_server:
    build:
      context: ./config/linux_server
    container_name: linux_server
    networks:
      vlan1:
        ipv4_address: 192.168.20.5
    environment:
      - APACHE_SERVER_NAME=192.168.20.5:80
    restart: always


  linux_client1:
    build:
      context: ./config/linux_client1
    container_name: linux_client1
    environment:
      - DEBIAN_FRONTEND=noninteractive
    networks:
      lan_network:
        ipv4_address: 192.168.10.100
        mac_address: 02:42:ac:11:00:02
    cap_add:
      - NET_ADMIN
    restart: always

  linux_client2:
    image: kalilinux/kali-rolling
    container_name: linux_client2
    networks:
      vlan1:
        ipv4_address: 192.168.20.100
    cap_add:
      - NET_ADMIN
    command: bash -c "
      apt-get update &&
      apt-get install -y iproute2 &&
      tail -f /dev/null"

  traffic_gen1:
    build:
      context: ./config/traffic_gen
    container_name: traffic_gen1
    networks:
      lan_network:
        ipv4_address: 192.168.10.101
    cap_add:
      - NET_ADMIN
    entrypoint: sh -c "
      sleep 10 &&
      while true; do
        iperf3 -c traffic_gen_server;
        sleep 5;
      done"

  traffic_gen2:
    build:
      context: ./config/traffic_gen
    container_name: traffic_gen2
    networks:
      vlan1:
        ipv4_address: 192.168.20.101
    cap_add:
      - NET_ADMIN
      - NET_RAW
    entrypoint: sh -c "
      sleep 10 &&
      while true; do
        iperf3 -c 192.168.10.4;
        sleep 5;
      done"
        
  traffic_gen_server:
    image: networkstatic/iperf3
    container_name: traffic_gen_server
    networks:
      lan_network:
        ipv4_address: 192.168.10.201
    command: -s
    restart: always  # Ensures the container restarts if it stops

  syslog:
    image: lscr.io/linuxserver/syslog-ng:latest
    container_name: syslog
    networks:
      vlan1:
        ipv4_address: 192.168.20.250

  unauthorized_device:
    image: alpine
    container_name: unauthorized_device
    networks:
      lan_network:
        ipv4_address: 192.168.10.80
        mac_address: 02:42:de:ad:be:ef
    cap_add:
      - NET_ADMIN
      - NET_RAW
    entrypoint: sh -c "sleep 10 && 
      ip addr flush dev eth0 &&
      ip addr add 192.168.10.100/24 brd 192.168.10.255 dev eth0 &&
      echo 'Simulating unauthorized device with conflicting IP...' &&
      sleep infinity"
    restart: always  # Ensures the container restarts if it stops
